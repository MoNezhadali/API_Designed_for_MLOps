from flask import Flask, request, jsonify
from datetime import datetime
import re

class MissingInputError(Exception):
    pass

class InvalidInputFormat(Exception):
    pass

class UnexpectedError(Exception):
    pass

app = Flask(__name__)

def calculate_age_category(birthdate, request_datetime):
    if birthdate==None:
        # raise MissingInputError(str("Birthdate is missing!"))
        return "no_age"
    try:
        birthdate = datetime.strptime(birthdate, "%Y-%m-%d")
        age = (request_datetime - birthdate).days // 365.25

        if age < 18:
            return "under_age"
        elif age <= 25:
            return "18-25"
        elif age <= 50:
            return "26-50"
        else:
            return "51-older"
    except ValueError:
        raise InvalidInputFormat(str("invalid_birthdate_format"))
    except Exception as e:
        raise UnexpectedError(str(f"Unexpected error in calculation of age: {e}"))

def count_consecutive_digits(email):
    if not email or "@" not in email:
        return 0
    try:
        username = email.split('@')[0]
        return max([len(match) for match in re.findall(r'\d+', username)] + [0])
    except Exception as e:
        raise UnexpectedError(str(f"Unexpected error in counting consecutive digits in Email: {e}"))


@app.route('/predict', methods=['POST'])
def predict():
    data = request.json
    request_datetime = datetime.now()  # or parse from request, if provided

    age_category = calculate_age_category(data.get("birthdate"), request_datetime)
    if age_category == "invalid_birthdate_format":
        return jsonify({"error": "Invalid birthdate format, expected YYYY-MM-DD"}), 400

    consecutive_digits = count_consecutive_digits(data.get("email"))

    # Model prediction logic here

    return jsonify({"age_category": age_category, "consecutive_digits_username": consecutive_digits})

    

@app.errorhandler(InvalidInputFormat)
def _handle_invalid_input_format(e):
    return jsonify({"status":422, "error":f"Invalid Input: {str(e)}"}), 422

@app.errorhandler(MissingInputError)
def _handle_missing_input(e):
    return jsonify({"status": 400, "error":f"Missing Input: {str(e)}"}), 400

@app.errorhandler(UnexpectedError)
def _handle_generic_exception(e):
    return jsonify({"status":500, "error":f"Unexpected Error: {str(e)}"}), 500

if __name__ == '__main__':
    app.run(debug=True)
